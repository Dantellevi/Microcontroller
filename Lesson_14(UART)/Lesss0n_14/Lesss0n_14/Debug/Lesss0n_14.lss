
Lesss0n_14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000303  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001dd  00000000  00000000  000004cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000273  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000920  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ba  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000062  00000000  00000000  00000b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	10 c0       	rjmp	.+32     	; 0x38 <__vector_11>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0f d0       	rcall	.+30     	; 0x52 <main>
  34:	3c c0       	rjmp	.+120    	; 0xae <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_11>:
	PORTD=0x00;
	DDRD=0xFF;
}

ISR(USART_RXC_vect)
{
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1
  42:	8f 93       	push	r24
	int b;
	b=UDR;
  44:	8c b1       	in	r24, 0x0c	; 12
}
  46:	8f 91       	pop	r24
  48:	0f 90       	pop	r0
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	0f 90       	pop	r0
  4e:	1f 90       	pop	r1
  50:	18 95       	reti

00000052 <main>:

int main(void)
{
	 USART_ini(8);//в зависимости от числа будет меняться скорость
  52:	88 e0       	ldi	r24, 0x08	; 8
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	1e d0       	rcall	.+60     	; 0x94 <USART_ini>
	 //51-19200
	 //68-14400
	 //103-9600
	 //207-4800
	 //416-2400
	USART_Transmit('O');
  58:	8f e4       	ldi	r24, 0x4F	; 79
  5a:	25 d0       	rcall	.+74     	; 0xa6 <USART_Transmit>
	USART_Transmit('K');
  5c:	8b e4       	ldi	r24, 0x4B	; 75
  5e:	23 d0       	rcall	.+70     	; 0xa6 <USART_Transmit>
	USART_Transmit('!');
  60:	81 e2       	ldi	r24, 0x21	; 33
  62:	21 d0       	rcall	.+66     	; 0xa6 <USART_Transmit>
	USART_Transmit(0x0d);
  64:	8d e0       	ldi	r24, 0x0D	; 13
  66:	1f d0       	rcall	.+62     	; 0xa6 <USART_Transmit>
	USART_Transmit(0x0a);
  68:	8a e0       	ldi	r24, 0x0A	; 10
  6a:	1d d0       	rcall	.+58     	; 0xa6 <USART_Transmit>
    /* Replace with your application code */
    while (1) 
    {
		USART_Transmit('O');
  6c:	8f e4       	ldi	r24, 0x4F	; 79
  6e:	1b d0       	rcall	.+54     	; 0xa6 <USART_Transmit>
		USART_Transmit('K');
  70:	8b e4       	ldi	r24, 0x4B	; 75
  72:	19 d0       	rcall	.+50     	; 0xa6 <USART_Transmit>
		USART_Transmit('!');
  74:	81 e2       	ldi	r24, 0x21	; 33
  76:	17 d0       	rcall	.+46     	; 0xa6 <USART_Transmit>
		USART_Transmit(0x0d);
  78:	8d e0       	ldi	r24, 0x0D	; 13
  7a:	15 d0       	rcall	.+42     	; 0xa6 <USART_Transmit>
		USART_Transmit(0x0a);
  7c:	8a e0       	ldi	r24, 0x0A	; 10
  7e:	13 d0       	rcall	.+38     	; 0xa6 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	80 e7       	ldi	r24, 0x70	; 112
  84:	92 e0       	ldi	r25, 0x02	; 2
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x34>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x3e>
  90:	00 00       	nop
  92:	ec cf       	rjmp	.-40     	; 0x6c <main+0x1a>

00000094 <USART_ini>:
#include "USART.h"

void USART_ini(unsigned int speed)
{
	UBRRH=(unsigned char)(speed>>8);
  94:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)speed;
  96:	89 b9       	out	0x09, r24	; 9
	//----------------------скорость
	
	UCSRB=(1<<RXEN)|(1<<TXEN);
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
	//----------------------включаем прием и передачу
	
	UCSRB|=(1<<RXCIE);//разрешаем прерывания приемника
  9c:	57 9a       	sbi	0x0a, 7	; 10
	
	UCSRA|=(1<<U2X);
  9e:	59 9a       	sbi	0x0b, 1	; 11
	// Удвоение частоты
	
	UCSRC=(1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  a0:	8e e8       	ldi	r24, 0x8E	; 142
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <USART_Transmit>:
	
}

void USART_Transmit(unsigned char data)
{
	while(!(UCSRA&(1<<UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <USART_Transmit>

		UDR=data;//начнет передовать данные только в том случае если буфер пуст
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
