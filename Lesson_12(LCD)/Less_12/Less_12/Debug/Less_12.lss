
Less_12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000694  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000286  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f9  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000232  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e4       	ldi	r30, 0x44	; 68
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	75 d0       	rcall	.+234    	; 0x134 <main>
  4a:	7a c0       	rjmp	.+244    	; 0x140 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <sendhalfbyte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	93 9a       	sbi	0x12, 3	; 18
  50:	95 e8       	ldi	r25, 0x85	; 133
  52:	9a 95       	dec	r25
  54:	f1 f7       	brne	.-4      	; 0x52 <sendhalfbyte+0x4>
  56:	00 00       	nop
  58:	92 b3       	in	r25, 0x12	; 18
  5a:	9f 70       	andi	r25, 0x0F	; 15
  5c:	92 bb       	out	0x12, r25	; 18
  5e:	92 b3       	in	r25, 0x12	; 18
  60:	82 95       	swap	r24
  62:	80 7f       	andi	r24, 0xF0	; 240
  64:	89 2b       	or	r24, r25
  66:	82 bb       	out	0x12, r24	; 18
  68:	93 98       	cbi	0x12, 3	; 18
  6a:	85 e8       	ldi	r24, 0x85	; 133
  6c:	8a 95       	dec	r24
  6e:	f1 f7       	brne	.-4      	; 0x6c <sendhalfbyte+0x1e>
  70:	00 00       	nop
  72:	08 95       	ret

00000074 <sendbyte>:
  74:	cf 93       	push	r28
  76:	c8 2f       	mov	r28, r24
  78:	61 11       	cpse	r22, r1
  7a:	02 c0       	rjmp	.+4      	; 0x80 <sendbyte+0xc>
  7c:	92 98       	cbi	0x12, 2	; 18
  7e:	01 c0       	rjmp	.+2      	; 0x82 <sendbyte+0xe>
  80:	92 9a       	sbi	0x12, 2	; 18
  82:	8c 2f       	mov	r24, r28
  84:	82 95       	swap	r24
  86:	8f 70       	andi	r24, 0x0F	; 15
  88:	e2 df       	rcall	.-60     	; 0x4e <sendhalfbyte>
  8a:	8c 2f       	mov	r24, r28
  8c:	e0 df       	rcall	.-64     	; 0x4e <sendhalfbyte>
  8e:	cf 91       	pop	r28
  90:	08 95       	ret

00000092 <sendchar>:
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	ef df       	rcall	.-34     	; 0x74 <sendbyte>
  96:	08 95       	ret

00000098 <lcd_print>:
}


//--------------------------------------
void lcd_print(char str1[])
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	ec 01       	movw	r28, r24
	wchar_t n;
	for (n=0;str1[n]!='\0';n++)
  9e:	88 81       	ld	r24, Y
  a0:	88 23       	and	r24, r24
  a2:	29 f0       	breq	.+10     	; 0xae <lcd_print+0x16>
  a4:	21 96       	adiw	r28, 0x01	; 1
	{
		sendchar(str1[n]);
  a6:	f5 df       	rcall	.-22     	; 0x92 <sendchar>

//--------------------------------------
void lcd_print(char str1[])
{
	wchar_t n;
	for (n=0;str1[n]!='\0';n++)
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <lcd_print+0xe>
	{
		sendchar(str1[n]);
	}
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e2       	ldi	r24, 0x2F	; 47
  b6:	95 e7       	ldi	r25, 0x75	; 117
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_ini+0x4>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_ini+0xa>
  be:	00 00       	nop

void LCD_ini(void)
{
	
	_delay_ms(15);//ждем 15 милисекунд
	sendhalfbyte(0b00000011);
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	c5 df       	rcall	.-118    	; 0x4e <sendhalfbyte>
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	9f e1       	ldi	r25, 0x1F	; 31
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_ini+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_ini+0x1a>
  ce:	00 00       	nop
	_delay_ms(4);
	sendhalfbyte(0b00000011);
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	bd df       	rcall	.-134    	; 0x4e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	87 ec       	ldi	r24, 0xC7	; 199
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_ini+0x24>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_ini+0x2a>
  de:	00 00       	nop
	_delay_us(100);
	sendhalfbyte(0b00000011);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	b5 df       	rcall	.-150    	; 0x4e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_ini+0x34>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_ini+0x3a>
  ee:	00 00       	nop
	_delay_ms(1);
	sendhalfbyte(0b00000010);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	ad df       	rcall	.-166    	; 0x4e <sendhalfbyte>
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_ini+0x44>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_ini+0x4a>
  fe:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00101000,0);//включаем 4-бытный режим,используем две линии
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	b7 df       	rcall	.-146    	; 0x74 <sendbyte>
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_ini+0x56>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_ini+0x5c>
 110:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100,0);//включаем отображение на дисплее(D=1)курсоры не включены
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	ae df       	rcall	.-164    	; 0x74 <sendbyte>
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_ini+0x68>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_ini+0x6e>
 122:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110,0);//выставляем курсор двигаться слева на право
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	a5 df       	rcall	.-182    	; 0x74 <sendbyte>
 12a:	08 95       	ret

0000012c <Port_settings>:


//--------------------------------------------
void Port_settings(void)
{
	DDRD=0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
 130:	12 ba       	out	0x12, r1	; 18
 132:	08 95       	ret

00000134 <main>:



int main(void)
{
	Port_settings();
 134:	fb df       	rcall	.-10     	; 0x12c <Port_settings>
	LCD_ini();
 136:	be df       	rcall	.-132    	; 0xb4 <LCD_ini>
	lcd_print("Sania-Pashsa!!");
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ad df       	rcall	.-166    	; 0x98 <lcd_print>
	
    /* Replace with your application code */
    while (1) 
    {
    }
 13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0xa>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
