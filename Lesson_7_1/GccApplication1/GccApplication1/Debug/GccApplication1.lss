
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001bb  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d3  00000000  00000000  00000337  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000158  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017f  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	31 c0       	rjmp	.+98     	; 0x98 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB=0x00;
  38:	17 ba       	out	0x17, r1	; 23
	DDRD=0xFF;
  3a:	8f ef       	ldi	r24, 0xFF	; 255
  3c:	81 bb       	out	0x11, r24	; 17
	
	PORTB=0x00;
  3e:	18 ba       	out	0x18, r1	; 24
	PORTD=0x00;
  40:	12 ba       	out	0x12, r1	; 18
    /* Replace with your application code */
    while (1) 
    {
		PORTD |=(1<<(PORTD0));
  42:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  44:	2f e7       	ldi	r18, 0x7F	; 127
  46:	88 e3       	ldi	r24, 0x38	; 56
  48:	91 e0       	ldi	r25, 0x01	; 1
  4a:	21 50       	subi	r18, 0x01	; 1
  4c:	80 40       	sbci	r24, 0x00	; 0
  4e:	90 40       	sbci	r25, 0x00	; 0
  50:	e1 f7       	brne	.-8      	; 0x4a <__SREG__+0xb>
  52:	00 c0       	rjmp	.+0      	; 0x54 <__SREG__+0x15>
  54:	00 00       	nop
		_delay_ms(50);
		PORTD &=~(1<<(PORTD0));
  56:	90 98       	cbi	0x12, 0	; 18
  58:	2f e7       	ldi	r18, 0x7F	; 127
  5a:	88 e3       	ldi	r24, 0x38	; 56
  5c:	91 e0       	ldi	r25, 0x01	; 1
  5e:	21 50       	subi	r18, 0x01	; 1
  60:	80 40       	sbci	r24, 0x00	; 0
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <__SREG__+0x1f>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>
  68:	00 00       	nop
		_delay_ms(50);
		if ((PINB&0b00000001))
  6a:	b0 9b       	sbis	0x16, 0	; 22
  6c:	ea cf       	rjmp	.-44     	; 0x42 <__SREG__+0x3>
		{
			PORTD |=(1<<(PORTD0));
  6e:	90 9a       	sbi	0x12, 0	; 18
  70:	2f ef       	ldi	r18, 0xFF	; 255
  72:	81 ee       	ldi	r24, 0xE1	; 225
  74:	94 e0       	ldi	r25, 0x04	; 4
  76:	21 50       	subi	r18, 0x01	; 1
  78:	80 40       	sbci	r24, 0x00	; 0
  7a:	90 40       	sbci	r25, 0x00	; 0
  7c:	e1 f7       	brne	.-8      	; 0x76 <__SREG__+0x37>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <__SREG__+0x41>
  80:	00 00       	nop
			_delay_ms(200);
			PORTD &=~(1<<(PORTD0));
  82:	90 98       	cbi	0x12, 0	; 18
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	81 ee       	ldi	r24, 0xE1	; 225
  88:	94 e0       	ldi	r25, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <__SREG__+0x4b>
  92:	00 c0       	rjmp	.+0      	; 0x94 <__SREG__+0x55>
  94:	00 00       	nop
  96:	d5 cf       	rjmp	.-86     	; 0x42 <__SREG__+0x3>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
