
Lesson_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000117  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  00000273  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000135  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016f  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000037  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	21 c0       	rjmp	.+66     	; 0x78 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main(void)
{
	unsigned char i;
	DDRD=0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	PORTD=0b00000001;
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	82 bb       	out	0x12, r24	; 18
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  40:	70 e0       	ldi	r23, 0x00	; 0
  42:	60 e0       	ldi	r22, 0x00	; 0
   
    while (1) 
    {
		for (i=0;i<=7;i++)
		{
			PORTD=(1<<i);
  44:	41 e0       	ldi	r20, 0x01	; 1
  46:	50 e0       	ldi	r21, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  48:	87 2f       	mov	r24, r23
  4a:	96 2f       	mov	r25, r22
   
    while (1) 
    {
		for (i=0;i<=7;i++)
		{
			PORTD=(1<<i);
  4c:	9a 01       	movw	r18, r20
  4e:	08 2e       	mov	r0, r24
  50:	02 c0       	rjmp	.+4      	; 0x56 <__SREG__+0x17>
  52:	22 0f       	add	r18, r18
  54:	33 1f       	adc	r19, r19
  56:	0a 94       	dec	r0
  58:	e2 f7       	brpl	.-8      	; 0x52 <__SREG__+0x13>
  5a:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	2f ef       	ldi	r18, 0xFF	; 255
  5e:	3e e5       	ldi	r19, 0x5E	; 94
  60:	e5 e0       	ldi	r30, 0x05	; 5
  62:	21 50       	subi	r18, 0x01	; 1
  64:	30 40       	sbci	r19, 0x00	; 0
  66:	e0 40       	sbci	r30, 0x00	; 0
  68:	e1 f7       	brne	.-8      	; 0x62 <__SREG__+0x23>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <__SREG__+0x2d>
  6c:	00 00       	nop
  6e:	01 96       	adiw	r24, 0x01	; 1
	DDRD=0xFF;
	PORTD=0b00000001;
   
    while (1) 
    {
		for (i=0;i<=7;i++)
  70:	88 30       	cpi	r24, 0x08	; 8
  72:	91 05       	cpc	r25, r1
  74:	59 f7       	brne	.-42     	; 0x4c <__SREG__+0xd>
  76:	e8 cf       	rjmp	.-48     	; 0x48 <__SREG__+0x9>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
