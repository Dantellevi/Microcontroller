
SPI_DIN_INDIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000366  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000208  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026b  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e3  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000282  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	67 c0       	rjmp	.+206    	; 0xdc <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	40 c0       	rjmp	.+128    	; 0xa8 <segchar+0x46>
  28:	24 c0       	rjmp	.+72     	; 0x72 <segchar+0x10>
  2a:	26 c0       	rjmp	.+76     	; 0x78 <segchar+0x16>
  2c:	28 c0       	rjmp	.+80     	; 0x7e <segchar+0x1c>
  2e:	2a c0       	rjmp	.+84     	; 0x84 <segchar+0x22>
  30:	2c c0       	rjmp	.+88     	; 0x8a <segchar+0x28>
  32:	2e c0       	rjmp	.+92     	; 0x90 <segchar+0x2e>
  34:	30 c0       	rjmp	.+96     	; 0x96 <segchar+0x34>
  36:	32 c0       	rjmp	.+100    	; 0x9c <segchar+0x3a>
  38:	34 c0       	rjmp	.+104    	; 0xa2 <segchar+0x40>
  3a:	39 c0       	rjmp	.+114    	; 0xae <segchar+0x4c>
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <segchar+0x52>
  3e:	3d c0       	rjmp	.+122    	; 0xba <segchar+0x58>

00000040 <__ctors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf e5       	ldi	r28, 0x5F	; 95
  46:	d4 e0       	ldi	r29, 0x04	; 4
  48:	de bf       	out	0x3e, r29	; 62
  4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a5 36       	cpi	r26, 0x65	; 101
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	1f d1       	rcall	.+574    	; 0x29c <main>
  5e:	5c c1       	rjmp	.+696    	; 0x318 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <segchar>:

//extern unsigned char clockeditmode;

void segchar (unsigned char seg)
{
	switch(seg)
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	8d 30       	cpi	r24, 0x0D	; 13
  66:	91 05       	cpc	r25, r1
  68:	50 f5       	brcc	.+84     	; 0xbe <segchar+0x5c>
  6a:	fc 01       	movw	r30, r24
  6c:	ed 5e       	subi	r30, 0xED	; 237
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	09 94       	ijmp
	{
		case 1: SPDR = 0b11111001; break;
  72:	89 ef       	ldi	r24, 0xF9	; 249
  74:	8f b9       	out	0x0f, r24	; 15
  76:	08 95       	ret
		case 2: SPDR = 0b10100100; break;
  78:	84 ea       	ldi	r24, 0xA4	; 164
  7a:	8f b9       	out	0x0f, r24	; 15
  7c:	08 95       	ret
		case 3: SPDR = 0b10110000; break;
  7e:	80 eb       	ldi	r24, 0xB0	; 176
  80:	8f b9       	out	0x0f, r24	; 15
  82:	08 95       	ret
		case 4: SPDR = 0b10011001; break;
  84:	89 e9       	ldi	r24, 0x99	; 153
  86:	8f b9       	out	0x0f, r24	; 15
  88:	08 95       	ret
		case 5: SPDR = 0b10010010; break;
  8a:	82 e9       	ldi	r24, 0x92	; 146
  8c:	8f b9       	out	0x0f, r24	; 15
  8e:	08 95       	ret
		case 6: SPDR = 0b10000010; break;
  90:	82 e8       	ldi	r24, 0x82	; 130
  92:	8f b9       	out	0x0f, r24	; 15
  94:	08 95       	ret
		case 7: SPDR = 0b11111000; break;
  96:	88 ef       	ldi	r24, 0xF8	; 248
  98:	8f b9       	out	0x0f, r24	; 15
  9a:	08 95       	ret
		case 8: SPDR = 0b10000000; break;
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	8f b9       	out	0x0f, r24	; 15
  a0:	08 95       	ret
		case 9: SPDR = 0b10010000; break;
  a2:	80 e9       	ldi	r24, 0x90	; 144
  a4:	8f b9       	out	0x0f, r24	; 15
  a6:	08 95       	ret
		case 0: SPDR = 0b11000000; break;
  a8:	80 ec       	ldi	r24, 0xC0	; 192
  aa:	8f b9       	out	0x0f, r24	; 15
  ac:	08 95       	ret
		case 10: SPDR = 0b10111111;  break; // знак -
  ae:	8f eb       	ldi	r24, 0xBF	; 191
  b0:	8f b9       	out	0x0f, r24	; 15
  b2:	08 95       	ret
		case 11: SPDR = 0b11111111;  break; // пустое место
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8f b9       	out	0x0f, r24	; 15
  b8:	08 95       	ret
		case 12: SPDR = 0b11000110;  break; // буква — дл€ показаний температуры
  ba:	86 ec       	ldi	r24, 0xC6	; 198
  bc:	8f b9       	out	0x0f, r24	; 15
  be:	08 95       	ret

000000c0 <timer_ini>:
	}
}
//--------------------------------------------
void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим —“— (сброс по совпадению)
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);   //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
  c6:	89 b7       	in	r24, 0x39	; 57
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00001111; //записываем в регистр число дл€ сравнени€
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b01000010;
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	8e bd       	out	0x2e, r24	; 46
  da:	08 95       	ret

000000dc <__vector_6>:
}
//--------------------------------------------
unsigned char n_count=0;
//--------------------------------------------
ISR (TIMER1_COMPA_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	if(n_count==0)
  fe:	80 91 60 00 	lds	r24, 0x0060
 102:	81 11       	cpse	r24, r1
 104:	0b c0       	rjmp	.+22     	; 0x11c <__vector_6+0x40>
	{
		segchar(R1);
 106:	80 91 64 00 	lds	r24, 0x0064
 10a:	ab df       	rcall	.-170    	; 0x62 <segchar>
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 10c:	77 9b       	sbis	0x0e, 7	; 14
 10e:	fe cf       	rjmp	.-4      	; 0x10c <__vector_6+0x30>
		SPDR = 0b00001110;
 110:	8e e0       	ldi	r24, 0x0E	; 14
 112:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <__vector_6+0x38>
		//сгенерируем отрицательный фронт дл§ записи в STORAGE REGISTER
		PORTB |= (1<<PORTB2); //высокий уровень
 118:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PORTB2); //низкий уровень
 11a:	c2 98       	cbi	0x18, 2	; 24
	}
	if(n_count==1)
 11c:	80 91 60 00 	lds	r24, 0x0060
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <__vector_6+0x5e>
	{
		segchar(R2);
 124:	80 91 63 00 	lds	r24, 0x0063
 128:	9c df       	rcall	.-200    	; 0x62 <segchar>
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 12a:	77 9b       	sbis	0x0e, 7	; 14
 12c:	fe cf       	rjmp	.-4      	; 0x12a <__vector_6+0x4e>
		SPDR = 0b00001101;
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 132:	77 9b       	sbis	0x0e, 7	; 14
 134:	fe cf       	rjmp	.-4      	; 0x132 <__vector_6+0x56>
		//сгенерируем отрицательный фронт дл§ записи в STORAGE REGISTER
		PORTB |= (1<<PORTB2); //высокий уровень
 136:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PORTB2); //низкий уровень
 138:	c2 98       	cbi	0x18, 2	; 24
	}
	if(n_count==2)
 13a:	80 91 60 00 	lds	r24, 0x0060
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	59 f4       	brne	.+22     	; 0x158 <__vector_6+0x7c>
	{
		segchar(R3);
 142:	80 91 62 00 	lds	r24, 0x0062
 146:	8d df       	rcall	.-230    	; 0x62 <segchar>
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 148:	77 9b       	sbis	0x0e, 7	; 14
 14a:	fe cf       	rjmp	.-4      	; 0x148 <__vector_6+0x6c>
		SPDR = 0b00001011;
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 150:	77 9b       	sbis	0x0e, 7	; 14
 152:	fe cf       	rjmp	.-4      	; 0x150 <__vector_6+0x74>
		//сгенерируем отрицательный фронт дл§ записи в STORAGE REGISTER
		PORTB |= (1<<PORTB2); //высокий уровень
 154:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PORTB2); //низкий уровень
 156:	c2 98       	cbi	0x18, 2	; 24
	}
	if(n_count==3)
 158:	80 91 60 00 	lds	r24, 0x0060
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	59 f4       	brne	.+22     	; 0x176 <__vector_6+0x9a>
	{
		segchar(R4);
 160:	80 91 61 00 	lds	r24, 0x0061
 164:	7e df       	rcall	.-260    	; 0x62 <segchar>
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 166:	77 9b       	sbis	0x0e, 7	; 14
 168:	fe cf       	rjmp	.-4      	; 0x166 <__vector_6+0x8a>
		SPDR = 0b00000111;
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
 16e:	77 9b       	sbis	0x0e, 7	; 14
 170:	fe cf       	rjmp	.-4      	; 0x16e <__vector_6+0x92>
		//сгенерируем отрицательный фронт дл§ записи в STORAGE REGISTER
		PORTB |= (1<<PORTB2); //высокий уровень
 172:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PORTB2); //низкий уровень
 174:	c2 98       	cbi	0x18, 2	; 24
	}
	n_count++;
 176:	80 91 60 00 	lds	r24, 0x0060
 17a:	8f 5f       	subi	r24, 0xFF	; 255
	if (n_count>3) n_count=0;
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	18 f4       	brcc	.+6      	; 0x186 <__vector_6+0xaa>
		while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутс€
		//сгенерируем отрицательный фронт дл§ записи в STORAGE REGISTER
		PORTB |= (1<<PORTB2); //высокий уровень
		PORTB &= ~(1<<PORTB2); //низкий уровень
	}
	n_count++;
 180:	80 93 60 00 	sts	0x0060, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <__vector_6+0xae>
	if (n_count>3) n_count=0;
 186:	10 92 60 00 	sts	0x0060, r1
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <ledprint>:
//--------------------------------------------
void ledprint(unsigned int number)
{
 1ac:	ac 01       	movw	r20, r24
	R1 = number%10;
 1ae:	9c 01       	movw	r18, r24
 1b0:	ad ec       	ldi	r26, 0xCD	; 205
 1b2:	bc ec       	ldi	r27, 0xCC	; 204
 1b4:	a5 d0       	rcall	.+330    	; 0x300 <__umulhisi3>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	9c 01       	movw	r18, r24
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	82 0f       	add	r24, r18
 1d6:	93 1f       	adc	r25, r19
 1d8:	9a 01       	movw	r18, r20
 1da:	28 1b       	sub	r18, r24
 1dc:	39 0b       	sbc	r19, r25
 1de:	20 93 64 00 	sts	0x0064, r18
	R2 = number%100/10;
 1e2:	9a 01       	movw	r18, r20
 1e4:	36 95       	lsr	r19
 1e6:	27 95       	ror	r18
 1e8:	36 95       	lsr	r19
 1ea:	27 95       	ror	r18
 1ec:	ab e7       	ldi	r26, 0x7B	; 123
 1ee:	b4 e1       	ldi	r27, 0x14	; 20
 1f0:	87 d0       	rcall	.+270    	; 0x300 <__umulhisi3>
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	64 e6       	ldi	r22, 0x64	; 100
 1f8:	68 9f       	mul	r22, r24
 1fa:	90 01       	movw	r18, r0
 1fc:	69 9f       	mul	r22, r25
 1fe:	30 0d       	add	r19, r0
 200:	11 24       	eor	r1, r1
 202:	ca 01       	movw	r24, r20
 204:	82 1b       	sub	r24, r18
 206:	93 0b       	sbc	r25, r19
 208:	9c 01       	movw	r18, r24
 20a:	ad ec       	ldi	r26, 0xCD	; 205
 20c:	bc ec       	ldi	r27, 0xCC	; 204
 20e:	78 d0       	rcall	.+240    	; 0x300 <__umulhisi3>
 210:	96 95       	lsr	r25
 212:	87 95       	ror	r24
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	80 93 63 00 	sts	0x0063, r24
	R3 = number%1000/100;
 220:	fa 01       	movw	r30, r20
 222:	f6 95       	lsr	r31
 224:	e7 95       	ror	r30
 226:	f6 95       	lsr	r31
 228:	e7 95       	ror	r30
 22a:	f6 95       	lsr	r31
 22c:	e7 95       	ror	r30
 22e:	9f 01       	movw	r18, r30
 230:	a5 ec       	ldi	r26, 0xC5	; 197
 232:	b0 e2       	ldi	r27, 0x20	; 32
 234:	65 d0       	rcall	.+202    	; 0x300 <__umulhisi3>
 236:	92 95       	swap	r25
 238:	82 95       	swap	r24
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	89 27       	eor	r24, r25
 23e:	9f 70       	andi	r25, 0x0F	; 15
 240:	89 27       	eor	r24, r25
 242:	68 ee       	ldi	r22, 0xE8	; 232
 244:	73 e0       	ldi	r23, 0x03	; 3
 246:	86 9f       	mul	r24, r22
 248:	90 01       	movw	r18, r0
 24a:	87 9f       	mul	r24, r23
 24c:	30 0d       	add	r19, r0
 24e:	96 9f       	mul	r25, r22
 250:	30 0d       	add	r19, r0
 252:	11 24       	eor	r1, r1
 254:	42 1b       	sub	r20, r18
 256:	53 0b       	sbc	r21, r19
 258:	9a 01       	movw	r18, r20
 25a:	36 95       	lsr	r19
 25c:	27 95       	ror	r18
 25e:	36 95       	lsr	r19
 260:	27 95       	ror	r18
 262:	ab e7       	ldi	r26, 0x7B	; 123
 264:	b4 e1       	ldi	r27, 0x14	; 20
 266:	4c d0       	rcall	.+152    	; 0x300 <__umulhisi3>
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	80 93 62 00 	sts	0x0062, r24
	R4 = number/1000;
 270:	9f 01       	movw	r18, r30
 272:	a5 ec       	ldi	r26, 0xC5	; 197
 274:	b0 e2       	ldi	r27, 0x20	; 32
 276:	44 d0       	rcall	.+136    	; 0x300 <__umulhisi3>
 278:	92 95       	swap	r25
 27a:	82 95       	swap	r24
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	89 27       	eor	r24, r25
 280:	9f 70       	andi	r25, 0x0F	; 15
 282:	89 27       	eor	r24, r25
 284:	80 93 61 00 	sts	0x0061, r24
 288:	08 95       	ret

0000028a <SPI_init>:

#include "Main.h"

void SPI_init(void)
{
	DDRB|=(1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5);
 28a:	87 b3       	in	r24, 0x17	; 23
 28c:	8c 62       	ori	r24, 0x2C	; 44
 28e:	87 bb       	out	0x17, r24	; 23
	PORTB&=~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5));
 290:	88 b3       	in	r24, 0x18	; 24
 292:	83 7d       	andi	r24, 0xD3	; 211
 294:	88 bb       	out	0x18, r24	; 24
	SPCR=((1<<SPE)|(1<<MSTR));// включаем шину , объ€вим ведущим
 296:	80 e5       	ldi	r24, 0x50	; 80
 298:	8d b9       	out	0x0d, r24	; 13
 29a:	08 95       	ret

0000029c <main>:

int main(void)
{//int i=0;
	unsigned int i=0;
	
	SPI_init();
 29c:	f6 df       	rcall	.-20     	; 0x28a <SPI_init>
	timer_ini();
 29e:	10 df       	rcall	.-480    	; 0xc0 <timer_ini>
	sei();
 2a0:	78 94       	sei
	
	SPDR=0b00000000;
 2a2:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR&(1<<SPIF)));//подождем пока данные передадутс€
 2a4:	77 9b       	sbis	0x0e, 7	; 14
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <main+0x8>
	SPDR=0b00000000;
 2a8:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR&(1<<SPIF)));//подождем пока данные передадутс€
 2aa:	77 9b       	sbis	0x0e, 7	; 14
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <main+0xe>
	//сгенерируем отрицательный фронт дл€ записи в STORAGE REGISTER
	PORTB|=(1<<PORTB2);
 2ae:	c2 9a       	sbi	0x18, 2	; 24
	PORTB&=~((1<<PORTB2));
 2b0:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	84 e3       	ldi	r24, 0x34	; 52
 2b6:	9c e0       	ldi	r25, 0x0C	; 12
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x1c>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x26>
 2c2:	00 00       	nop
	// 	_delay_ms(2000);
	/* Replace with your application code */
	while (1)
	{
		
		for(i=0;i<10000;i++)
 2c4:	00 e0       	ldi	r16, 0x00	; 0
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	c0 2f       	mov	r28, r16
 2ca:	d1 2f       	mov	r29, r17
		{
			ledprint(i);
 2cc:	ce 01       	movw	r24, r28
 2ce:	6e df       	rcall	.-292    	; 0x1ac <ledprint>
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	24 e3       	ldi	r18, 0x34	; 52
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x3a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x44>
 2e0:	00 00       	nop
	// 	_delay_ms(2000);
	/* Replace with your application code */
	while (1)
	{
		
		for(i=0;i<10000;i++)
 2e2:	21 96       	adiw	r28, 0x01	; 1
 2e4:	c0 31       	cpi	r28, 0x10	; 16
 2e6:	97 e2       	ldi	r25, 0x27	; 39
 2e8:	d9 07       	cpc	r29, r25
 2ea:	81 f7       	brne	.-32     	; 0x2cc <main+0x30>
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	89 e6       	ldi	r24, 0x69	; 105
 2f0:	98 e1       	ldi	r25, 0x18	; 24
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x56>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x60>
 2fc:	00 00       	nop
 2fe:	e4 cf       	rjmp	.-56     	; 0x2c8 <main+0x2c>

00000300 <__umulhisi3>:
 300:	a2 9f       	mul	r26, r18
 302:	b0 01       	movw	r22, r0
 304:	b3 9f       	mul	r27, r19
 306:	c0 01       	movw	r24, r0
 308:	a3 9f       	mul	r26, r19
 30a:	01 d0       	rcall	.+2      	; 0x30e <__umulhisi3+0xe>
 30c:	b2 9f       	mul	r27, r18
 30e:	70 0d       	add	r23, r0
 310:	81 1d       	adc	r24, r1
 312:	11 24       	eor	r1, r1
 314:	91 1d       	adc	r25, r1
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
