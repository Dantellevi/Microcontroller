
ATTiny_31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000448  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000448  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098b  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000424  00000000  00000000  00000f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cc  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000257  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000340  00000000  00000000  00001a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001dc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 e4       	ldi	r30, 0x48	; 72
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	a0 d0       	rcall	.+320    	; 0x186 <main>
  46:	fe c1       	rjmp	.+1020   	; 0x444 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <sendhalfbyte>:
void sendhalfbyte(unsigned char c)

{
	
	c<<=3;
	e1;
  4a:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	95 e8       	ldi	r25, 0x85	; 133
  4e:	9a 95       	dec	r25
  50:	f1 f7       	brne	.-4      	; 0x4e <sendhalfbyte+0x4>
  52:	00 00       	nop
	_delay_us(50);
	PORTD&=0b10000111;//стирание информации на входах
  54:	92 b3       	in	r25, 0x12	; 18
  56:	97 78       	andi	r25, 0x87	; 135
  58:	92 bb       	out	0x12, r25	; 18
	PORTD|=c;
  5a:	92 b3       	in	r25, 0x12	; 18
//--------------------------------------------
void sendhalfbyte(unsigned char c)

{
	
	c<<=3;
  5c:	88 0f       	add	r24, r24
  5e:	88 0f       	add	r24, r24
  60:	88 0f       	add	r24, r24
	e1;
	_delay_us(50);
	PORTD&=0b10000111;//стирание информации на входах
	PORTD|=c;
  62:	89 2b       	or	r24, r25
  64:	82 bb       	out	0x12, r24	; 18
	e0;
  66:	92 98       	cbi	0x12, 2	; 18
  68:	85 e8       	ldi	r24, 0x85	; 133
  6a:	8a 95       	dec	r24
  6c:	f1 f7       	brne	.-4      	; 0x6a <sendhalfbyte+0x20>
  6e:	00 00       	nop
  70:	08 95       	ret

00000072 <sendbyte>:
	
}
//---------------------------------------------
void sendbyte(unsigned char c,unsigned char mode)

{
  72:	cf 93       	push	r28
  74:	c8 2f       	mov	r28, r24
	if (mode==0)
  76:	61 11       	cpse	r22, r1
  78:	02 c0       	rjmp	.+4      	; 0x7e <sendbyte+0xc>
	{
		rs0;
  7a:	91 98       	cbi	0x12, 1	; 18
  7c:	01 c0       	rjmp	.+2      	; 0x80 <sendbyte+0xe>
	}else

	{
		rs1;
  7e:	91 9a       	sbi	0x12, 1	; 18
	}
	unsigned char hc=0;
	
	hc=c>>4;
	sendhalfbyte(hc);
  80:	8c 2f       	mov	r24, r28
  82:	82 95       	swap	r24
  84:	8f 70       	andi	r24, 0x0F	; 15
  86:	e1 df       	rcall	.-62     	; 0x4a <sendhalfbyte>
	sendhalfbyte(c);
  88:	8c 2f       	mov	r24, r28
  8a:	df df       	rcall	.-66     	; 0x4a <sendhalfbyte>
	
	
}
  8c:	cf 91       	pop	r28
  8e:	08 95       	ret

00000090 <sendchar>:
//----------------------------------------------

void sendchar(unsigned char c)

{
	sendbyte(c,1);
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	ef df       	rcall	.-34     	; 0x72 <sendbyte>
  94:	08 95       	ret

00000096 <lcd_gotoxy>:
//-------------------------------------------

void lcd_gotoxy(unsigned char x, unsigned char y)
{
	char adress;
	adress=(0x40*y+x)|0b10000000;
  96:	62 95       	swap	r22
  98:	66 0f       	add	r22, r22
  9a:	66 0f       	add	r22, r22
  9c:	60 7c       	andi	r22, 0xC0	; 192
  9e:	86 0f       	add	r24, r22
	sendbyte(adress,0);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	e6 df       	rcall	.-52     	; 0x72 <sendbyte>
  a6:	08 95       	ret

000000a8 <lcd_clear>:
}
//---------------------------------------
void lcd_clear()
{
	sendbyte(0b00000001,0);
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	e2 df       	rcall	.-60     	; 0x72 <sendbyte>
  ae:	87 eb       	ldi	r24, 0xB7	; 183
  b0:	9b e0       	ldi	r25, 0x0B	; 11
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_clear+0xa>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_clear+0x10>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <lcd_print>:
}


//--------------------------------------
void lcd_print(char str1[])
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
	wchar_t n;
	for (n=0;str1[n]!='\0';n++)
  c2:	88 81       	ld	r24, Y
  c4:	88 23       	and	r24, r24
  c6:	29 f0       	breq	.+10     	; 0xd2 <lcd_print+0x16>
  c8:	21 96       	adiw	r28, 0x01	; 1
	{
		sendchar(str1[n]);
  ca:	e2 df       	rcall	.-60     	; 0x90 <sendchar>

//--------------------------------------
void lcd_print(char str1[])
{
	wchar_t n;
	for (n=0;str1[n]!='\0';n++)
  cc:	89 91       	ld	r24, Y+
  ce:	81 11       	cpse	r24, r1
  d0:	fc cf       	rjmp	.-8      	; 0xca <lcd_print+0xe>
	{
		sendchar(str1[n]);
	}
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e2       	ldi	r24, 0x2F	; 47
  da:	95 e7       	ldi	r25, 0x75	; 117
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_ini+0x4>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop

void LCD_ini(void)
{
	
	_delay_ms(15);//ждем 15 милисекунд
	sendhalfbyte(0b00000011);
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	b1 df       	rcall	.-158    	; 0x4a <sendhalfbyte>
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9f e1       	ldi	r25, 0x1F	; 31
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <__stack+0xd>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__stack+0x13>
  f2:	00 00       	nop
	_delay_ms(4);
	sendhalfbyte(0b00000011);
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	a9 df       	rcall	.-174    	; 0x4a <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	87 ec       	ldi	r24, 0xC7	; 199
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <__stack+0x1d>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__stack+0x23>
 102:	00 00       	nop
	_delay_us(100);
	sendhalfbyte(0b00000011);
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	a1 df       	rcall	.-190    	; 0x4a <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f ec       	ldi	r24, 0xCF	; 207
 10a:	97 e0       	ldi	r25, 0x07	; 7
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <__stack+0x2d>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__stack+0x33>
 112:	00 00       	nop
	_delay_ms(1);
	sendhalfbyte(0b00000010);
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	99 df       	rcall	.-206    	; 0x4a <sendhalfbyte>
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <__stack+0x3d>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__stack+0x43>
 122:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00101000,0);//включаем 4-бытный режим,используем две линии
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	a4 df       	rcall	.-184    	; 0x72 <sendbyte>
 12a:	8f ec       	ldi	r24, 0xCF	; 207
 12c:	97 e0       	ldi	r25, 0x07	; 7
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <__stack+0x4f>
 132:	00 c0       	rjmp	.+0      	; 0x134 <__stack+0x55>
 134:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100,0);//включаем отображение на дисплее(D=1)курсоры не включены
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	9b df       	rcall	.-202    	; 0x72 <sendbyte>
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <__stack+0x61>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__stack+0x67>
 146:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110,0);//выставляем курсор двигаться слева на право
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	92 df       	rcall	.-220    	; 0x72 <sendbyte>
 14e:	08 95       	ret

00000150 <SPI_Init>:
#include "Main.h"

//__________________________________
void SPI_Init(void)
{
	DDRB|=((1<<PORTB4)|(1<<PORTB6)|(1<<PORTB7));//ножки USI на выход
 150:	87 b3       	in	r24, 0x17	; 23
 152:	80 6d       	ori	r24, 0xD0	; 208
 154:	87 bb       	out	0x17, r24	; 23
	DDRB&=~((1<<PORTB5));//нока DI на вход
 156:	bd 98       	cbi	0x17, 5	; 23
	PORTB&=~((1<<PORTB4)|(1<<PORTB6)|(1<<PORTB7));//ножки USI в низкий уровень
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8f 72       	andi	r24, 0x2F	; 47
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	08 95       	ret

00000160 <SPI_sendByte>:
//++++++++++++++++++++++++++++++++++


char SPI_sendByte(char byte)
{
	USIDR=byte;//данные в регистр
 160:	8f b9       	out	0x0f, r24	; 15
	USISR|=(1<<USIOIF);//установим флаг начала передачи
 162:	76 9a       	sbi	0x0e, 6	; 14
	while(!(USISR&(1<<USIOIF)))
 164:	76 99       	sbic	0x0e, 6	; 14
 166:	09 c0       	rjmp	.+18     	; 0x17a <SPI_sendByte+0x1a>
	{
		USICR|=((1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC));//постепенно передаем байт
 168:	8d b1       	in	r24, 0x0d	; 13
 16a:	8b 61       	ori	r24, 0x1B	; 27
 16c:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8a e1       	ldi	r24, 0x1A	; 26
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <SPI_sendByte+0x10>
 174:	00 c0       	rjmp	.+0      	; 0x176 <SPI_sendByte+0x16>

char SPI_sendByte(char byte)
{
	USIDR=byte;//данные в регистр
	USISR|=(1<<USIOIF);//установим флаг начала передачи
	while(!(USISR&(1<<USIOIF)))
 176:	76 9b       	sbis	0x0e, 6	; 14
 178:	f7 cf       	rjmp	.-18     	; 0x168 <SPI_sendByte+0x8>
	{
		USICR|=((1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC));//постепенно передаем байт
		_delay_us(10);
		
	}
	return USIDR;
 17a:	8f b1       	in	r24, 0x0f	; 15

}
 17c:	08 95       	ret

0000017e <Port_ini>:

//+++++++++++++++++++++++

void Port_ini(void)
{
	PORTD=0x00;
 17e:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	81 bb       	out	0x11, r24	; 17
 184:	08 95       	ret

00000186 <main>:
}

int main(void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	dd 27       	eor	r29, r29
 18e:	ca 50       	subi	r28, 0x0A	; 10
 190:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	unsigned char n=0,m=0;//переменная для случайного числа
	SPI_Init();
 192:	de df       	rcall	.-68     	; 0x150 <SPI_Init>
	Port_ini();
 194:	f4 df       	rcall	.-24     	; 0x17e <Port_ini>
	LCD_ini();
 196:	a0 df       	rcall	.-192    	; 0xd8 <LCD_ini>
	lcd_clear();
 198:	87 df       	rcall	.-242    	; 0xa8 <lcd_clear>
	lcd_gotoxy(0,0);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	7b df       	rcall	.-266    	; 0x96 <lcd_gotoxy>
// 	_delay_ms(1000);

	/* Replace with your application code */
	while (1)
	{
		lcd_clear();
 1a0:	83 df       	rcall	.-250    	; 0xa8 <lcd_clear>
		lcd_gotoxy(0,0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	77 df       	rcall	.-274    	; 0x96 <lcd_gotoxy>
		n=(unsigned char)rand()%256;
 1a8:	55 d0       	rcall	.+170    	; 0x254 <rand>
		m=SPI_sendByte(n);
 1aa:	da df       	rcall	.-76     	; 0x160 <SPI_sendByte>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ac:	4a e0       	ldi	r20, 0x0A	; 10
 1ae:	be 01       	movw	r22, r28
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	5d d0       	rcall	.+186    	; 0x272 <__itoa_ncheck>
		itoa(m,str,10);
		lcd_print(str);
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	7f df       	rcall	.-258    	; 0xbc <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	89 e6       	ldi	r24, 0x69	; 105
 1c2:	98 e1       	ldi	r25, 0x18	; 24
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x3e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x48>
 1ce:	00 00       	nop
 1d0:	e7 cf       	rjmp	.-50     	; 0x1a0 <main+0x1a>

000001d2 <do_rand>:
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	ee ee       	ldi	r30, 0xEE	; 238
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	bd c0       	rjmp	.+378    	; 0x356 <__prologue_saves__+0xc>
 1dc:	ec 01       	movw	r28, r24
 1de:	68 81       	ld	r22, Y
 1e0:	79 81       	ldd	r23, Y+1	; 0x01
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	9b 81       	ldd	r25, Y+3	; 0x03
 1e6:	61 15       	cp	r22, r1
 1e8:	71 05       	cpc	r23, r1
 1ea:	81 05       	cpc	r24, r1
 1ec:	91 05       	cpc	r25, r1
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <do_rand+0x26>
 1f0:	64 e2       	ldi	r22, 0x24	; 36
 1f2:	79 ed       	ldi	r23, 0xD9	; 217
 1f4:	8b e5       	ldi	r24, 0x5B	; 91
 1f6:	97 e0       	ldi	r25, 0x07	; 7
 1f8:	2d e1       	ldi	r18, 0x1D	; 29
 1fa:	33 ef       	ldi	r19, 0xF3	; 243
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	6b d0       	rcall	.+214    	; 0x2d8 <__divmodsi4>
 202:	49 01       	movw	r8, r18
 204:	5a 01       	movw	r10, r20
 206:	27 ea       	ldi	r18, 0xA7	; 167
 208:	31 e4       	ldi	r19, 0x41	; 65
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	80 d0       	rcall	.+256    	; 0x310 <__mulsidi3>
 210:	69 01       	movw	r12, r18
 212:	7a 01       	movw	r14, r20
 214:	c5 01       	movw	r24, r10
 216:	b4 01       	movw	r22, r8
 218:	2c ee       	ldi	r18, 0xEC	; 236
 21a:	34 ef       	ldi	r19, 0xF4	; 244
 21c:	4f ef       	ldi	r20, 0xFF	; 255
 21e:	5f ef       	ldi	r21, 0xFF	; 255
 220:	77 d0       	rcall	.+238    	; 0x310 <__mulsidi3>
 222:	02 2f       	mov	r16, r18
 224:	13 2f       	mov	r17, r19
 226:	9a 01       	movw	r18, r20
 228:	d7 01       	movw	r26, r14
 22a:	c6 01       	movw	r24, r12
 22c:	80 0f       	add	r24, r16
 22e:	91 1f       	adc	r25, r17
 230:	a2 1f       	adc	r26, r18
 232:	b3 1f       	adc	r27, r19
 234:	b7 ff       	sbrs	r27, 7
 236:	03 c0       	rjmp	.+6      	; 0x23e <do_rand+0x6c>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	a1 09       	sbc	r26, r1
 23c:	b0 48       	sbci	r27, 0x80	; 128
 23e:	88 83       	st	Y, r24
 240:	99 83       	std	Y+1, r25	; 0x01
 242:	aa 83       	std	Y+2, r26	; 0x02
 244:	bb 83       	std	Y+3, r27	; 0x03
 246:	9f 77       	andi	r25, 0x7F	; 127
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	dd 27       	eor	r29, r29
 24c:	ec e0       	ldi	r30, 0x0C	; 12
 24e:	9a c0       	rjmp	.+308    	; 0x384 <__epilogue_restores__+0xc>

00000250 <rand_r>:
 250:	c0 df       	rcall	.-128    	; 0x1d2 <do_rand>
 252:	08 95       	ret

00000254 <rand>:
 254:	80 e6       	ldi	r24, 0x60	; 96
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	bc df       	rcall	.-136    	; 0x1d2 <do_rand>
 25a:	08 95       	ret

0000025c <srand>:
 25c:	a0 e0       	ldi	r26, 0x00	; 0
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	80 93 60 00 	sts	0x0060, r24
 264:	90 93 61 00 	sts	0x0061, r25
 268:	a0 93 62 00 	sts	0x0062, r26
 26c:	b0 93 63 00 	sts	0x0063, r27
 270:	08 95       	ret

00000272 <__itoa_ncheck>:
 272:	bb 27       	eor	r27, r27
 274:	4a 30       	cpi	r20, 0x0A	; 10
 276:	31 f4       	brne	.+12     	; 0x284 <__itoa_ncheck+0x12>
 278:	99 23       	and	r25, r25
 27a:	22 f4       	brpl	.+8      	; 0x284 <__itoa_ncheck+0x12>
 27c:	bd e2       	ldi	r27, 0x2D	; 45
 27e:	90 95       	com	r25
 280:	81 95       	neg	r24
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	01 c0       	rjmp	.+2      	; 0x288 <__utoa_common>

00000286 <__utoa_ncheck>:
 286:	bb 27       	eor	r27, r27

00000288 <__utoa_common>:
 288:	fb 01       	movw	r30, r22
 28a:	55 27       	eor	r21, r21
 28c:	aa 27       	eor	r26, r26
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	aa 1f       	adc	r26, r26
 294:	a4 17       	cp	r26, r20
 296:	10 f0       	brcs	.+4      	; 0x29c <__utoa_common+0x14>
 298:	a4 1b       	sub	r26, r20
 29a:	83 95       	inc	r24
 29c:	50 51       	subi	r21, 0x10	; 16
 29e:	b9 f7       	brne	.-18     	; 0x28e <__utoa_common+0x6>
 2a0:	a0 5d       	subi	r26, 0xD0	; 208
 2a2:	aa 33       	cpi	r26, 0x3A	; 58
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <__utoa_common+0x20>
 2a6:	a9 5d       	subi	r26, 0xD9	; 217
 2a8:	a1 93       	st	Z+, r26
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	79 f7       	brne	.-34     	; 0x28c <__utoa_common+0x4>
 2ae:	b1 11       	cpse	r27, r1
 2b0:	b1 93       	st	Z+, r27
 2b2:	11 92       	st	Z+, r1
 2b4:	cb 01       	movw	r24, r22
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <strrev>

000002b8 <strrev>:
 2b8:	dc 01       	movw	r26, r24
 2ba:	fc 01       	movw	r30, r24
 2bc:	67 2f       	mov	r22, r23
 2be:	71 91       	ld	r23, Z+
 2c0:	77 23       	and	r23, r23
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <strrev+0x4>
 2c4:	32 97       	sbiw	r30, 0x02	; 2
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <strrev+0x18>
 2c8:	7c 91       	ld	r23, X
 2ca:	6d 93       	st	X+, r22
 2cc:	70 83       	st	Z, r23
 2ce:	62 91       	ld	r22, -Z
 2d0:	ae 17       	cp	r26, r30
 2d2:	bf 07       	cpc	r27, r31
 2d4:	c8 f3       	brcs	.-14     	; 0x2c8 <strrev+0x10>
 2d6:	08 95       	ret

000002d8 <__divmodsi4>:
 2d8:	05 2e       	mov	r0, r21
 2da:	97 fb       	bst	r25, 7
 2dc:	16 f4       	brtc	.+4      	; 0x2e2 <__divmodsi4+0xa>
 2de:	00 94       	com	r0
 2e0:	0f d0       	rcall	.+30     	; 0x300 <__negsi2>
 2e2:	57 fd       	sbrc	r21, 7
 2e4:	05 d0       	rcall	.+10     	; 0x2f0 <__divmodsi4_neg2>
 2e6:	5e d0       	rcall	.+188    	; 0x3a4 <__udivmodsi4>
 2e8:	07 fc       	sbrc	r0, 7
 2ea:	02 d0       	rcall	.+4      	; 0x2f0 <__divmodsi4_neg2>
 2ec:	46 f4       	brtc	.+16     	; 0x2fe <__divmodsi4_exit>
 2ee:	08 c0       	rjmp	.+16     	; 0x300 <__negsi2>

000002f0 <__divmodsi4_neg2>:
 2f0:	50 95       	com	r21
 2f2:	40 95       	com	r20
 2f4:	30 95       	com	r19
 2f6:	21 95       	neg	r18
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	4f 4f       	sbci	r20, 0xFF	; 255
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255

000002fe <__divmodsi4_exit>:
 2fe:	08 95       	ret

00000300 <__negsi2>:
 300:	90 95       	com	r25
 302:	80 95       	com	r24
 304:	70 95       	com	r23
 306:	61 95       	neg	r22
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	8f 4f       	sbci	r24, 0xFF	; 255
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__mulsidi3>:
 310:	68 94       	set
 312:	00 13       	cpse	r16, r16

00000314 <__umulsidi3>:
 314:	e8 94       	clt
 316:	a0 e0       	ldi	r26, 0x00	; 0
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e0 e9       	ldi	r30, 0x90	; 144
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	1d c0       	rjmp	.+58     	; 0x35a <__prologue_saves__+0x10>
 320:	ef ef       	ldi	r30, 0xFF	; 255
 322:	e7 f9       	bld	r30, 7
 324:	59 01       	movw	r10, r18
 326:	6a 01       	movw	r12, r20
 328:	5e 23       	and	r21, r30
 32a:	55 0f       	add	r21, r21
 32c:	ee 08       	sbc	r14, r14
 32e:	fe 2c       	mov	r15, r14
 330:	87 01       	movw	r16, r14
 332:	9b 01       	movw	r18, r22
 334:	ac 01       	movw	r20, r24
 336:	9e 23       	and	r25, r30
 338:	99 0f       	add	r25, r25
 33a:	66 0b       	sbc	r22, r22
 33c:	76 2f       	mov	r23, r22
 33e:	cb 01       	movw	r24, r22
 340:	53 d0       	rcall	.+166    	; 0x3e8 <__muldi3>
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	dd 27       	eor	r29, r29
 346:	ea e0       	ldi	r30, 0x0A	; 10
 348:	1f c0       	rjmp	.+62     	; 0x388 <__epilogue_restores__+0x10>

0000034a <__prologue_saves__>:
 34a:	2f 92       	push	r2
 34c:	3f 92       	push	r3
 34e:	4f 92       	push	r4
 350:	5f 92       	push	r5
 352:	6f 92       	push	r6
 354:	7f 92       	push	r7
 356:	8f 92       	push	r8
 358:	9f 92       	push	r9
 35a:	af 92       	push	r10
 35c:	bf 92       	push	r11
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	ca 1b       	sub	r28, r26
 372:	cd bf       	out	0x3d, r28	; 61
 374:	dd 27       	eor	r29, r29
 376:	09 94       	ijmp

00000378 <__epilogue_restores__>:
 378:	2a 88       	ldd	r2, Y+18	; 0x12
 37a:	39 88       	ldd	r3, Y+17	; 0x11
 37c:	48 88       	ldd	r4, Y+16	; 0x10
 37e:	5f 84       	ldd	r5, Y+15	; 0x0f
 380:	6e 84       	ldd	r6, Y+14	; 0x0e
 382:	7d 84       	ldd	r7, Y+13	; 0x0d
 384:	8c 84       	ldd	r8, Y+12	; 0x0c
 386:	9b 84       	ldd	r9, Y+11	; 0x0b
 388:	aa 84       	ldd	r10, Y+10	; 0x0a
 38a:	b9 84       	ldd	r11, Y+9	; 0x09
 38c:	c8 84       	ldd	r12, Y+8	; 0x08
 38e:	df 80       	ldd	r13, Y+7	; 0x07
 390:	ee 80       	ldd	r14, Y+6	; 0x06
 392:	fd 80       	ldd	r15, Y+5	; 0x05
 394:	0c 81       	ldd	r16, Y+4	; 0x04
 396:	1b 81       	ldd	r17, Y+3	; 0x03
 398:	aa 81       	ldd	r26, Y+2	; 0x02
 39a:	d9 81       	ldd	r29, Y+1	; 0x01
 39c:	ce 0f       	add	r28, r30
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	ca 2f       	mov	r28, r26
 3a2:	08 95       	ret

000003a4 <__udivmodsi4>:
 3a4:	a1 e2       	ldi	r26, 0x21	; 33
 3a6:	1a 2e       	mov	r1, r26
 3a8:	aa 1b       	sub	r26, r26
 3aa:	bb 1b       	sub	r27, r27
 3ac:	fd 01       	movw	r30, r26
 3ae:	0d c0       	rjmp	.+26     	; 0x3ca <__udivmodsi4_ep>

000003b0 <__udivmodsi4_loop>:
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	ee 1f       	adc	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	a2 17       	cp	r26, r18
 3ba:	b3 07       	cpc	r27, r19
 3bc:	e4 07       	cpc	r30, r20
 3be:	f5 07       	cpc	r31, r21
 3c0:	20 f0       	brcs	.+8      	; 0x3ca <__udivmodsi4_ep>
 3c2:	a2 1b       	sub	r26, r18
 3c4:	b3 0b       	sbc	r27, r19
 3c6:	e4 0b       	sbc	r30, r20
 3c8:	f5 0b       	sbc	r31, r21

000003ca <__udivmodsi4_ep>:
 3ca:	66 1f       	adc	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	1a 94       	dec	r1
 3d4:	69 f7       	brne	.-38     	; 0x3b0 <__udivmodsi4_loop>
 3d6:	60 95       	com	r22
 3d8:	70 95       	com	r23
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	9b 01       	movw	r18, r22
 3e0:	ac 01       	movw	r20, r24
 3e2:	bd 01       	movw	r22, r26
 3e4:	cf 01       	movw	r24, r30
 3e6:	08 95       	ret

000003e8 <__muldi3>:
 3e8:	df 93       	push	r29
 3ea:	cf 93       	push	r28
 3ec:	9f 92       	push	r9
 3ee:	a0 e4       	ldi	r26, 0x40	; 64
 3f0:	9a 2e       	mov	r9, r26
 3f2:	00 24       	eor	r0, r0
 3f4:	d0 01       	movw	r26, r0
 3f6:	e0 01       	movw	r28, r0
 3f8:	f0 01       	movw	r30, r0
 3fa:	16 95       	lsr	r17
 3fc:	07 95       	ror	r16
 3fe:	f7 94       	ror	r15
 400:	e7 94       	ror	r14
 402:	d7 94       	ror	r13
 404:	c7 94       	ror	r12
 406:	b7 94       	ror	r11
 408:	a7 94       	ror	r10
 40a:	48 f4       	brcc	.+18     	; 0x41e <__muldi3+0x36>
 40c:	10 68       	ori	r17, 0x80	; 128
 40e:	a2 0f       	add	r26, r18
 410:	b3 1f       	adc	r27, r19
 412:	c4 1f       	adc	r28, r20
 414:	d5 1f       	adc	r29, r21
 416:	e6 1f       	adc	r30, r22
 418:	f7 1f       	adc	r31, r23
 41a:	08 1e       	adc	r0, r24
 41c:	19 1e       	adc	r1, r25
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	44 1f       	adc	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	66 1f       	adc	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	9a 94       	dec	r9
 430:	21 f7       	brne	.-56     	; 0x3fa <__muldi3+0x12>
 432:	9d 01       	movw	r18, r26
 434:	ae 01       	movw	r20, r28
 436:	bf 01       	movw	r22, r30
 438:	c0 01       	movw	r24, r0
 43a:	11 24       	eor	r1, r1
 43c:	9f 90       	pop	r9
 43e:	cf 91       	pop	r28
 440:	df 91       	pop	r29
 442:	08 95       	ret

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
