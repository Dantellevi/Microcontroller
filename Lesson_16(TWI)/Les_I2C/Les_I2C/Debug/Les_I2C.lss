
Les_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000411  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000024c  00000000  00000000  00000695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bc  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c0  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 38       	cpi	r26, 0x80	; 128
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	25 d0       	rcall	.+74     	; 0x8e <main>
  44:	5c c0       	rjmp	.+184    	; 0xfe <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <EE_WriteByte>:

#include "eepromnext.h"

int EE_WriteByte(unsigned char c)
{
	TWDR=c;//запишем байт в регистр данных
  48:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);//включаем передачу данных
  4a:	84 e8       	ldi	r24, 0x84	; 132
  4c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));//подождем пока установится TWIN
  4e:	06 b6       	in	r0, 0x36	; 54
  50:	07 fe       	sbrs	r0, 7
  52:	fd cf       	rjmp	.-6      	; 0x4e <EE_WriteByte+0x6>
	if ((TWSR&0xF8)!=TW_MT_DATA_ASK)
  54:	91 b1       	in	r25, 0x01	; 1
  56:	98 7f       	andi	r25, 0xF8	; 248
  58:	21 e0       	ldi	r18, 0x01	; 1
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	98 32       	cpi	r25, 0x28	; 40
  5e:	11 f4       	brne	.+4      	; 0x64 <EE_WriteByte+0x1c>
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 1;
	}
	return 0;
  64:	c9 01       	movw	r24, r18
  66:	08 95       	ret

00000068 <I2C_Init>:
#include "I2C.h"

void I2C_Init(void)

{
	TWBR=0x20;//скорость передачи при 8МГц получается 100кГц
  68:	80 e2       	ldi	r24, 0x20	; 32
  6a:	80 b9       	out	0x00, r24	; 0
  6c:	08 95       	ret

0000006e <I2C_StartCondition>:
	
}

void I2C_StartCondition(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  6e:	84 ea       	ldi	r24, 0xA4	; 164
  70:	86 bf       	out	0x36, r24	; 54
	
	while(!((TWCR&(1<<TWINT))));//подождем пока установится TWIN
  72:	06 b6       	in	r0, 0x36	; 54
  74:	07 fe       	sbrs	r0, 7
  76:	fd cf       	rjmp	.-6      	; 0x72 <I2C_StartCondition+0x4>
	
}
  78:	08 95       	ret

0000007a <I2C_StopCondion>:
void I2C_StopCondion(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  7a:	84 e9       	ldi	r24, 0x94	; 148
  7c:	86 bf       	out	0x36, r24	; 54
  7e:	08 95       	ret

00000080 <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR=c;//запишем байт в регистр данных
  80:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);//включаем передачу данных 
  82:	84 e8       	ldi	r24, 0x84	; 132
  84:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));//подождем пока установится TWIN
  86:	06 b6       	in	r0, 0x36	; 54
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <I2C_SendByte+0x6>
	
  8c:	08 95       	ret

0000008e <main>:

unsigned char bt[32];
int main(void)
{
	int i=0;
	USART_Init(8);
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	28 d0       	rcall	.+80     	; 0xe4 <USART_Init>
	I2C_Init();
  94:	e9 df       	rcall	.-46     	; 0x68 <I2C_Init>
	//запись
	I2C_StartCondition();//отправим условие старта
  96:	eb df       	rcall	.-42     	; 0x6e <I2C_StartCondition>
//	USART_Transmit('S');

	USART_Transmit(TWSR);
  98:	81 b1       	in	r24, 0x01	; 1
  9a:	2d d0       	rcall	.+90     	; 0xf6 <USART_Transmit>
	I2C_SendByte(0b10100000); //передача адреса устройства и бита записи
  9c:	80 ea       	ldi	r24, 0xA0	; 160
  9e:	f0 df       	rcall	.-32     	; 0x80 <I2C_SendByte>
	USART_Transmit(TWSR);
  a0:	81 b1       	in	r24, 0x01	; 1
  a2:	29 d0       	rcall	.+82     	; 0xf6 <USART_Transmit>
	I2C_SendByte(0);//передача старшой части адреса ячейки памяти 
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	ec df       	rcall	.-40     	; 0x80 <I2C_SendByte>
	USART_Transmit(TWSR);
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	25 d0       	rcall	.+74     	; 0xf6 <USART_Transmit>
	I2C_SendByte(0);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	e8 df       	rcall	.-48     	; 0x80 <I2C_SendByte>
	USART_Transmit(TWSR);
  b0:	81 b1       	in	r24, 0x01	; 1
  b2:	21 d0       	rcall	.+66     	; 0xf6 <USART_Transmit>
	I2C_StopCondion();//условия стоп
  b4:	e2 df       	rcall	.-60     	; 0x7a <I2C_StopCondion>
	USART_Transmit(TWSR);
  b6:	81 b1       	in	r24, 0x01	; 1
  b8:	1e d0       	rcall	.+60     	; 0xf6 <USART_Transmit>
	bt[0]=0x30;bt[1]=0x31;bt[2]=0x32;bt[3]=0x33;bt[4]=0x34;
  ba:	e0 e6       	ldi	r30, 0x60	; 96
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 e3       	ldi	r24, 0x30	; 48
  c0:	80 83       	st	Z, r24
  c2:	81 e3       	ldi	r24, 0x31	; 49
  c4:	81 83       	std	Z+1, r24	; 0x01
  c6:	82 e3       	ldi	r24, 0x32	; 50
  c8:	82 83       	std	Z+2, r24	; 0x02
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	83 83       	std	Z+3, r24	; 0x03
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	84 83       	std	Z+4, r24	; 0x04
  d2:	ef 01       	movw	r28, r30
  d4:	00 e8       	ldi	r16, 0x80	; 128
  d6:	10 e0       	ldi	r17, 0x00	; 0
	
	for (i=0;i<=31;i++)
	{
		EE_WriteByte(bt[i]);
  d8:	89 91       	ld	r24, Y+
  da:	b6 df       	rcall	.-148    	; 0x48 <EE_WriteByte>
	USART_Transmit(TWSR);
	I2C_StopCondion();//условия стоп
	USART_Transmit(TWSR);
	bt[0]=0x30;bt[1]=0x31;bt[2]=0x32;bt[3]=0x33;bt[4]=0x34;
	
	for (i=0;i<=31;i++)
  dc:	c0 17       	cp	r28, r16
  de:	d1 07       	cpc	r29, r17
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x4a>
	
    /* Replace with your application code */
    while (1) 
    {
		
    }
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x54>

000000e4 <USART_Init>:
#include "usart.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
		//Зададим скорость работы USART 115200
		UBRRH = (unsigned char)(ubrr>>8);
  e4:	90 bd       	out	0x20, r25	; 32
		UBRRL = (unsigned char)ubrr;
  e6:	89 b9       	out	0x09, r24	; 9
		
		UCSRB=(1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	8a b9       	out	0x0a, r24	; 10
		UCSRB |= (1<<RXCIE); //Разрешаем прерывание при передаче
  ec:	57 9a       	sbi	0x0a, 7	; 10
		UCSRA |= (1<<U2X); // Для 8 мгц
  ee:	59 9a       	sbi	0x0b, 1	; 11
		UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
  f0:	8e e8       	ldi	r24, 0x8E	; 142
  f2:	80 bd       	out	0x20, r24	; 32
  f4:	08 95       	ret

000000f6 <USART_Transmit>:
		//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <USART_Transmit>
	UDR = data; //Начало передачи данных
  fa:	8c b9       	out	0x0c, r24	; 12
  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
