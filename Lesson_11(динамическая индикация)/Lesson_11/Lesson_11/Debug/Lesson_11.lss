
Lesson_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000021e  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000177  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025a  00000000  00000000  00000669  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ee  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	29 c0       	rjmp	.+82     	; 0x7a <Set+0x10>
  28:	2b c0       	rjmp	.+86     	; 0x80 <Set+0x16>
  2a:	2d c0       	rjmp	.+90     	; 0x86 <Set+0x1c>
  2c:	2f c0       	rjmp	.+94     	; 0x8c <Set+0x22>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <Set+0x28>
  30:	33 c0       	rjmp	.+102    	; 0x98 <Set+0x2e>
  32:	35 c0       	rjmp	.+106    	; 0x9e <Set+0x34>
  34:	37 c0       	rjmp	.+110    	; 0xa4 <Set+0x3a>
  36:	39 c0       	rjmp	.+114    	; 0xaa <Set+0x40>
  38:	3b c0       	rjmp	.+118    	; 0xb0 <Set+0x46>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a4 36       	cpi	r26, 0x64	; 100
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	8e d0       	rcall	.+284    	; 0x174 <main>
  58:	a7 c0       	rjmp	.+334    	; 0x1a8 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <Settings>:


// -------------------------------------------
void Settings(void)
{
	DDRB=0b00001111;
  5c:	8f e0       	ldi	r24, 0x0F	; 15
  5e:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF;
  60:	8f ef       	ldi	r24, 0xFF	; 255
  62:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
  64:	12 ba       	out	0x12, r1	; 18
	PORTB|=(1<<(PORTB5));
  66:	c5 9a       	sbi	0x18, 5	; 24
  68:	08 95       	ret

0000006a <Set>:


//-------------------------------------------
void Set(unsigned char i)
{
	switch(i)
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	8a 30       	cpi	r24, 0x0A	; 10
  6e:	91 05       	cpc	r25, r1
  70:	08 f5       	brcc	.+66     	; 0xb4 <Set+0x4a>
  72:	fc 01       	movw	r30, r24
  74:	ed 5e       	subi	r30, 0xED	; 237
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	09 94       	ijmp
	{
		case 0:{PORTD=0b00111111;break;}
  7a:	8f e3       	ldi	r24, 0x3F	; 63
  7c:	82 bb       	out	0x12, r24	; 18
  7e:	08 95       	ret
		case 1:{PORTD=0b00000110;break;}
  80:	86 e0       	ldi	r24, 0x06	; 6
  82:	82 bb       	out	0x12, r24	; 18
  84:	08 95       	ret
		case 2:{PORTD=0b01011011;break;}
  86:	8b e5       	ldi	r24, 0x5B	; 91
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret
		case 3:{PORTD=0b01001111;break;}
  8c:	8f e4       	ldi	r24, 0x4F	; 79
  8e:	82 bb       	out	0x12, r24	; 18
  90:	08 95       	ret
		case 4:{PORTD=0b01100110;break;}
  92:	86 e6       	ldi	r24, 0x66	; 102
  94:	82 bb       	out	0x12, r24	; 18
  96:	08 95       	ret
		case 5:{PORTD=0b01101101;break;}
  98:	8d e6       	ldi	r24, 0x6D	; 109
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	08 95       	ret
		case 6:{PORTD=0b01111101;break;}
  9e:	8d e7       	ldi	r24, 0x7D	; 125
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret
		case 7:{PORTD=0b00000111;break;}
  a4:	87 e0       	ldi	r24, 0x07	; 7
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret
		case 8:{PORTD=0b01111111;break;}
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	08 95       	ret
		case 9:{PORTD=0b01101111;break;}
  b0:	8f e6       	ldi	r24, 0x6F	; 111
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret

000000b6 <ledprint>:

//-----------------------------------------------------------------

void ledprint(unsigned char Numm)
{
	Fl_1=Numm%10;
  b6:	9d ec       	ldi	r25, 0xCD	; 205
  b8:	89 9f       	mul	r24, r25
  ba:	91 2d       	mov	r25, r1
  bc:	11 24       	eor	r1, r1
  be:	96 95       	lsr	r25
  c0:	96 95       	lsr	r25
  c2:	96 95       	lsr	r25
  c4:	39 2f       	mov	r19, r25
  c6:	33 0f       	add	r19, r19
  c8:	23 2f       	mov	r18, r19
  ca:	22 0f       	add	r18, r18
  cc:	22 0f       	add	r18, r18
  ce:	23 0f       	add	r18, r19
  d0:	82 1b       	sub	r24, r18
  d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Fl_1>
	Fl_2=Numm/10;
  d6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Fl_2>
  da:	08 95       	ret

000000dc <timer_ini>:

//-----------------------------------------------------------------

void timer_ini(void)
{
	TCCR1B|=(1<<(WGM12));//устанавливаем режи СТС
  dc:	8e b5       	in	r24, 0x2e	; 46
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<(OCIE1A));//устанавливает бит разрешения прерывания 1-ого стчетчика по совпадению OCR1A
  e2:	89 b7       	in	r24, 0x39	; 57
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	89 bf       	out	0x39, r24	; 57
	OCR1AH=0b01111010;//число для сравнения
  e8:	8a e7       	ldi	r24, 0x7A	; 122
  ea:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0b00010010;
  ec:	82 e1       	ldi	r24, 0x12	; 18
  ee:	8a bd       	out	0x2a, r24	; 42
	TCCR1B|=(1<<CS11);//устанавливаем делитель
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	8e bd       	out	0x2e, r24	; 46
  f6:	08 95       	ret

000000f8 <__vector_6>:
//-------------------------------------------------------------------------
unsigned char N_cout;
//-----------------------------------------------------------------------

ISR(TIMER1_COMPA_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	
	if (N_cout==0)
 11a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <N_cout>
 11e:	81 11       	cpse	r24, r1
 120:	05 c0       	rjmp	.+10     	; 0x12c <__vector_6+0x34>
	{
		PORTB&=~(1<<(PORTB1));
 122:	c1 98       	cbi	0x18, 1	; 24
		PORTB|=(1<<(PORTB0));
 124:	c0 9a       	sbi	0x18, 0	; 24
		
		Set(Fl_1);
 126:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Fl_1>
 12a:	9f df       	rcall	.-194    	; 0x6a <Set>
	}
	if (N_cout==1)
 12c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <N_cout>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	29 f4       	brne	.+10     	; 0x13e <__vector_6+0x46>
	{
		
		PORTB&=~(1<<(PORTB0));
 134:	c0 98       	cbi	0x18, 0	; 24
		PORTB|=(1<<(PORTB1));
 136:	c1 9a       	sbi	0x18, 1	; 24
		Set(Fl_2);
 138:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Fl_2>
 13c:	96 df       	rcall	.-212    	; 0x6a <Set>
	}
	N_cout++;
 13e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <N_cout>
 142:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (N_cout>1)
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	18 f4       	brcc	.+6      	; 0x14e <__vector_6+0x56>
		
		PORTB&=~(1<<(PORTB0));
		PORTB|=(1<<(PORTB1));
		Set(Fl_2);
	}
	N_cout++;
 148:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <N_cout>
 14c:	02 c0       	rjmp	.+4      	; 0x152 <__vector_6+0x5a>
	
	if (N_cout>1)
	{
		N_cout=0;
 14e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <N_cout>
	
	
	
	

}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <main>:
//------------------------------------------------------------


int main(void)
{
	timer_ini();
 174:	b3 df       	rcall	.-154    	; 0xdc <timer_ini>
	Settings();
 176:	72 df       	rcall	.-284    	; 0x5c <Settings>
	i=0;
 178:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	sei();
 17c:	78 94       	sei
//	ledprint(72);
    /* Replace with your application code */
    while (1) 
    {
		for(i=0;i<=99;i++)
 17e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 182:	80 e0       	ldi	r24, 0x00	; 0
		{
			ledprint(i);
 184:	98 df       	rcall	.-208    	; 0xb6 <ledprint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 e6       	ldi	r24, 0x69	; 105
 18a:	98 e1       	ldi	r25, 0x18	; 24
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x18>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x22>
 196:	00 00       	nop
	sei();
//	ledprint(72);
    /* Replace with your application code */
    while (1) 
    {
		for(i=0;i<=99;i++)
 198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1a2:	84 36       	cpi	r24, 0x64	; 100
 1a4:	78 f3       	brcs	.-34     	; 0x184 <main+0x10>
 1a6:	eb cf       	rjmp	.-42     	; 0x17e <main+0xa>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
