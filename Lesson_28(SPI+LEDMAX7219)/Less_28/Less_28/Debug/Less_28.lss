
Less_28.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000292  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000292  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000046d  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000186  00000000  00000000  00000829  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b3  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bb  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f7  00000000  00000000  00000dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e9       	ldi	r30, 0x92	; 146
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	94 d0       	rcall	.+296    	; 0x172 <main>
  4a:	21 c1       	rjmp	.+578    	; 0x28e <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <SPI_init>:

char dg=8;

void SPI_init(void)
{
	DDRB|=(1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5);
  4e:	87 b3       	in	r24, 0x17	; 23
  50:	8c 62       	ori	r24, 0x2C	; 44
  52:	87 bb       	out	0x17, r24	; 23
	PORTB&=~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5));
  54:	88 b3       	in	r24, 0x18	; 24
  56:	83 7d       	andi	r24, 0xD3	; 211
  58:	88 bb       	out	0x18, r24	; 24
	SPCR=((1<<SPE)|(1<<MSTR)|(1<<SPR0));// включаем шину , объ€вим ведущим
  5a:	81 e5       	ldi	r24, 0x51	; 81
  5c:	8d b9       	out	0x0d, r24	; 13
  5e:	08 95       	ret

00000060 <SPI_Sendbyte>:
}


void SPI_Sendbyte(char byte)
{
	SPDR=byte;
  60:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR&(1<<SPIF)));//подождем пока данные передадутс€
  62:	77 9b       	sbis	0x0e, 7	; 14
  64:	fe cf       	rjmp	.-4      	; 0x62 <SPI_Sendbyte+0x2>
	
}
  66:	08 95       	ret

00000068 <Send_7219>:


void Send_7219(char rg,char dt)
{
  68:	cf 93       	push	r28
  6a:	c6 2f       	mov	r28, r22
	PORTB&=~(1<<PORTB2);
  6c:	c2 98       	cbi	0x18, 2	; 24
	SPI_Sendbyte(rg);
  6e:	f8 df       	rcall	.-16     	; 0x60 <SPI_Sendbyte>
	SPI_Sendbyte(dt);
  70:	8c 2f       	mov	r24, r28
  72:	f6 df       	rcall	.-20     	; 0x60 <SPI_Sendbyte>
	PORTB|=(1<<PORTB2);
  74:	c2 9a       	sbi	0x18, 2	; 24
}
  76:	cf 91       	pop	r28
  78:	08 95       	ret

0000007a <clear_7219>:

void clear_7219(void)
{
  7a:	cf 93       	push	r28
	char i=dg;
  7c:	c0 91 60 00 	lds	r28, 0x0060
	
	do 
	{
		Send_7219(i,0xF);//пустой символ
  80:	6f e0       	ldi	r22, 0x0F	; 15
  82:	8c 2f       	mov	r24, r28
  84:	f1 df       	rcall	.-30     	; 0x68 <Send_7219>
	} while (--i);
  86:	c1 50       	subi	r28, 0x01	; 1
  88:	d9 f7       	brne	.-10     	; 0x80 <clear_7219+0x6>
}
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

0000008e <Number_7219>:

void Number_7219(volatile long n)
{
  8e:	bf 92       	push	r11
  90:	cf 92       	push	r12
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	00 d0       	rcall	.+0      	; 0xa2 <Number_7219+0x14>
  a2:	00 d0       	rcall	.+0      	; 0xa4 <Number_7219+0x16>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	69 83       	std	Y+1, r22	; 0x01
  aa:	7a 83       	std	Y+2, r23	; 0x02
  ac:	8b 83       	std	Y+3, r24	; 0x03
  ae:	9c 83       	std	Y+4, r25	; 0x04
	char ng=0;//переменна€ дл€ минуса
	
	if (n<0)
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	9a 81       	ldd	r25, Y+2	; 0x02
  b4:	ab 81       	ldd	r26, Y+3	; 0x03
  b6:	bc 81       	ldd	r27, Y+4	; 0x04
  b8:	bb 23       	and	r27, r27
  ba:	94 f4       	brge	.+36     	; 0xe0 <Number_7219+0x52>
	{
		ng=1;
		n*=-1;
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	ab 81       	ldd	r26, Y+3	; 0x03
  c2:	bc 81       	ldd	r27, Y+4	; 0x04
  c4:	b0 95       	com	r27
  c6:	a0 95       	com	r26
  c8:	90 95       	com	r25
  ca:	81 95       	neg	r24
  cc:	9f 4f       	sbci	r25, 0xFF	; 255
  ce:	af 4f       	sbci	r26, 0xFF	; 255
  d0:	bf 4f       	sbci	r27, 0xFF	; 255
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	ab 83       	std	Y+3, r26	; 0x03
  d8:	bc 83       	std	Y+4, r27	; 0x04
{
	char ng=0;//переменна€ дл€ минуса
	
	if (n<0)
	{
		ng=1;
  da:	bb 24       	eor	r11, r11
  dc:	b3 94       	inc	r11
  de:	01 c0       	rjmp	.+2      	; 0xe2 <Number_7219+0x54>
	} while (--i);
}

void Number_7219(volatile long n)
{
	char ng=0;//переменна€ дл€ минуса
  e0:	b1 2c       	mov	r11, r1
	if (n<0)
	{
		ng=1;
		n*=-1;
	}
	clear_7219();
  e2:	cb df       	rcall	.-106    	; 0x7a <clear_7219>
	if (n==0)
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	9a 81       	ldd	r25, Y+2	; 0x02
  e8:	ab 81       	ldd	r26, Y+3	; 0x03
  ea:	bc 81       	ldd	r27, Y+4	; 0x04
  ec:	89 2b       	or	r24, r25
  ee:	8a 2b       	or	r24, r26
  f0:	8b 2b       	or	r24, r27
  f2:	31 f4       	brne	.+12     	; 0x100 <Number_7219+0x72>
	{
		Send_7219(0x01,0);//отправл€ем ноль в первый регистр
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	b7 df       	rcall	.-146    	; 0x68 <Send_7219>
		return;  
  fa:	2d c0       	rjmp	.+90     	; 0x156 <Number_7219+0xc8>
	}
	char i;
	do 
	{
		Send_7219(++i,n%10);
  fc:	01 2f       	mov	r16, r17
  fe:	07 c0       	rjmp	.+14     	; 0x10e <Number_7219+0x80>
 100:	0f 2e       	mov	r0, r31
 102:	fa e0       	ldi	r31, 0x0A	; 10
 104:	cf 2e       	mov	r12, r31
 106:	d1 2c       	mov	r13, r1
 108:	e1 2c       	mov	r14, r1
 10a:	f1 2c       	mov	r15, r1
 10c:	f0 2d       	mov	r31, r0
 10e:	69 81       	ldd	r22, Y+1	; 0x01
 110:	7a 81       	ldd	r23, Y+2	; 0x02
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	9c 81       	ldd	r25, Y+4	; 0x04
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	10 0f       	add	r17, r16
 11a:	a7 01       	movw	r20, r14
 11c:	96 01       	movw	r18, r12
 11e:	79 d0       	rcall	.+242    	; 0x212 <__divmodsi4>
 120:	81 2f       	mov	r24, r17
 122:	a2 df       	rcall	.-188    	; 0x68 <Send_7219>
		n/=10;
 124:	69 81       	ldd	r22, Y+1	; 0x01
 126:	7a 81       	ldd	r23, Y+2	; 0x02
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	9c 81       	ldd	r25, Y+4	; 0x04
 12c:	a7 01       	movw	r20, r14
 12e:	96 01       	movw	r18, r12
 130:	70 d0       	rcall	.+224    	; 0x212 <__divmodsi4>
 132:	29 83       	std	Y+1, r18	; 0x01
 134:	3a 83       	std	Y+2, r19	; 0x02
 136:	4b 83       	std	Y+3, r20	; 0x03
 138:	5c 83       	std	Y+4, r21	; 0x04
	} while (n);
 13a:	49 81       	ldd	r20, Y+1	; 0x01
 13c:	5a 81       	ldd	r21, Y+2	; 0x02
 13e:	6b 81       	ldd	r22, Y+3	; 0x03
 140:	7c 81       	ldd	r23, Y+4	; 0x04
 142:	45 2b       	or	r20, r21
 144:	46 2b       	or	r20, r22
 146:	47 2b       	or	r20, r23
 148:	c9 f6       	brne	.-78     	; 0xfc <Number_7219+0x6e>
	if (ng)
 14a:	bb 20       	and	r11, r11
 14c:	21 f0       	breq	.+8      	; 0x156 <Number_7219+0xc8>
	{
		Send_7219(i+1,0xA);//символ -
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 0f       	add	r24, r16
 154:	89 df       	rcall	.-238    	; 0x68 <Send_7219>
	}
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	bf 90       	pop	r11
 170:	08 95       	ret

00000172 <main>:

int main(void)
{//int i=0;
	unsigned int i=0;
	
	SPI_init();
 172:	6d df       	rcall	.-294    	; 0x4e <SPI_init>
	Send_7219(0x09,0xFF);//включаем режим декодировани€
 174:	6f ef       	ldi	r22, 0xFF	; 255
 176:	89 e0       	ldi	r24, 0x09	; 9
 178:	77 df       	rcall	.-274    	; 0x68 <Send_7219>
	Send_7219(0x0B,dg-1);//количество используемых элементов
 17a:	60 91 60 00 	lds	r22, 0x0060
 17e:	61 50       	subi	r22, 0x01	; 1
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	72 df       	rcall	.-284    	; 0x68 <Send_7219>
	Send_7219(0x0A,0x07);//€ркость диспле€
 184:	67 e0       	ldi	r22, 0x07	; 7
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	6f df       	rcall	.-290    	; 0x68 <Send_7219>
	Send_7219(0x0C,0x01);//включаем индикатор
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	6c df       	rcall	.-296    	; 0x68 <Send_7219>
	clear_7219();
 190:	74 df       	rcall	.-280    	; 0x7a <clear_7219>
	
		Send_7219(1,0x1);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	68 df       	rcall	.-304    	; 0x68 <Send_7219>
		Send_7219(2,0x2);
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	65 df       	rcall	.-310    	; 0x68 <Send_7219>
		Send_7219(3,0x3);
 19e:	63 e0       	ldi	r22, 0x03	; 3
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	62 df       	rcall	.-316    	; 0x68 <Send_7219>
		Send_7219(4,0x4);
 1a4:	64 e0       	ldi	r22, 0x04	; 4
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	5f df       	rcall	.-322    	; 0x68 <Send_7219>
		Send_7219(5,0x5);
 1aa:	65 e0       	ldi	r22, 0x05	; 5
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	5c df       	rcall	.-328    	; 0x68 <Send_7219>
		Send_7219(6,0x6);
 1b0:	66 e0       	ldi	r22, 0x06	; 6
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	59 df       	rcall	.-334    	; 0x68 <Send_7219>
		Send_7219(7,0x7);
 1b6:	67 e0       	ldi	r22, 0x07	; 7
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	56 df       	rcall	.-340    	; 0x68 <Send_7219>
		Send_7219(8,0x8);
 1bc:	68 e0       	ldi	r22, 0x08	; 8
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	53 df       	rcall	.-346    	; 0x68 <Send_7219>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	8e e9       	ldi	r24, 0x9E	; 158
 1c6:	94 e2       	ldi	r25, 0x24	; 36
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x56>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x60>
 1d2:	00 00       	nop
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	84 e3       	ldi	r24, 0x34	; 52
 1d8:	9c e0       	ldi	r25, 0x0C	; 12
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x68>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x72>
 1e4:	00 00       	nop
	_delay_ms(1500);
	
	_delay_ms(500);
	Number_7219(-2016);
 1e6:	60 e2       	ldi	r22, 0x20	; 32
 1e8:	78 ef       	ldi	r23, 0xF8	; 248
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	9f ef       	ldi	r25, 0xFF	; 255
 1ee:	4f df       	rcall	.-354    	; 0x8e <Number_7219>
}


int main(void)
{//int i=0;
	unsigned int i=0;
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(500);
	Number_7219(-2016);
	
	while (1)
	{
		Number_7219(i);
 1f4:	be 01       	movw	r22, r28
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	49 df       	rcall	.-366    	; 0x8e <Number_7219>
		i++;
 1fc:	21 96       	adiw	r28, 0x01	; 1
 1fe:	2f e7       	ldi	r18, 0x7F	; 127
 200:	8a e1       	ldi	r24, 0x1A	; 26
 202:	96 e0       	ldi	r25, 0x06	; 6
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x92>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x9c>
 20e:	00 00       	nop
 210:	f1 cf       	rjmp	.-30     	; 0x1f4 <main+0x82>

00000212 <__divmodsi4>:
 212:	05 2e       	mov	r0, r21
 214:	97 fb       	bst	r25, 7
 216:	16 f4       	brtc	.+4      	; 0x21c <__divmodsi4+0xa>
 218:	00 94       	com	r0
 21a:	0f d0       	rcall	.+30     	; 0x23a <__negsi2>
 21c:	57 fd       	sbrc	r21, 7
 21e:	05 d0       	rcall	.+10     	; 0x22a <__divmodsi4_neg2>
 220:	14 d0       	rcall	.+40     	; 0x24a <__udivmodsi4>
 222:	07 fc       	sbrc	r0, 7
 224:	02 d0       	rcall	.+4      	; 0x22a <__divmodsi4_neg2>
 226:	46 f4       	brtc	.+16     	; 0x238 <__divmodsi4_exit>
 228:	08 c0       	rjmp	.+16     	; 0x23a <__negsi2>

0000022a <__divmodsi4_neg2>:
 22a:	50 95       	com	r21
 22c:	40 95       	com	r20
 22e:	30 95       	com	r19
 230:	21 95       	neg	r18
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	4f 4f       	sbci	r20, 0xFF	; 255
 236:	5f 4f       	sbci	r21, 0xFF	; 255

00000238 <__divmodsi4_exit>:
 238:	08 95       	ret

0000023a <__negsi2>:
 23a:	90 95       	com	r25
 23c:	80 95       	com	r24
 23e:	70 95       	com	r23
 240:	61 95       	neg	r22
 242:	7f 4f       	sbci	r23, 0xFF	; 255
 244:	8f 4f       	sbci	r24, 0xFF	; 255
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	08 95       	ret

0000024a <__udivmodsi4>:
 24a:	a1 e2       	ldi	r26, 0x21	; 33
 24c:	1a 2e       	mov	r1, r26
 24e:	aa 1b       	sub	r26, r26
 250:	bb 1b       	sub	r27, r27
 252:	fd 01       	movw	r30, r26
 254:	0d c0       	rjmp	.+26     	; 0x270 <__udivmodsi4_ep>

00000256 <__udivmodsi4_loop>:
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	ee 1f       	adc	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	a2 17       	cp	r26, r18
 260:	b3 07       	cpc	r27, r19
 262:	e4 07       	cpc	r30, r20
 264:	f5 07       	cpc	r31, r21
 266:	20 f0       	brcs	.+8      	; 0x270 <__udivmodsi4_ep>
 268:	a2 1b       	sub	r26, r18
 26a:	b3 0b       	sbc	r27, r19
 26c:	e4 0b       	sbc	r30, r20
 26e:	f5 0b       	sbc	r31, r21

00000270 <__udivmodsi4_ep>:
 270:	66 1f       	adc	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	88 1f       	adc	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	1a 94       	dec	r1
 27a:	69 f7       	brne	.-38     	; 0x256 <__udivmodsi4_loop>
 27c:	60 95       	com	r22
 27e:	70 95       	com	r23
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	bd 01       	movw	r22, r26
 28a:	cf 01       	movw	r24, r30
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
