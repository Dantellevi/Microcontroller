
Less_25.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000194  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e2  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013d  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017b  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000006e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000070b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	3c c0       	rjmp	.+120    	; 0xae <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
int main(void)
{
	
	int i=0;
	
	DDRB|=(1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5);
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	8c 62       	ori	r24, 0x2C	; 44
  3c:	87 bb       	out	0x17, r24	; 23
	PORTB&=~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5));
  3e:	88 b3       	in	r24, 0x18	; 24
  40:	83 7d       	andi	r24, 0xD3	; 211
  42:	88 bb       	out	0x18, r24	; 24
	SPCR=((1<<SPE)|(1<<MSTR));// включаем шину , объ€вим ведущим
  44:	80 e5       	ldi	r24, 0x50	; 80
  46:	8d b9       	out	0x0d, r24	; 13
	
	SPDR=0b00000000;
  48:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR&(1<<SPIF)));//подождем пока данные передадутс€
  4a:	77 9b       	sbis	0x0e, 7	; 14
  4c:	fe cf       	rjmp	.-4      	; 0x4a <__SREG__+0xb>
	//сгенерируем отрицательный фронт дл€ записи в STORAGE REGISTER
	PORTB|=(1<<PORTB2);
  4e:	c2 9a       	sbi	0x18, 2	; 24
	PORTB&=~((1<<PORTB2));
  50:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  52:	2f ef       	ldi	r18, 0xFF	; 255
  54:	43 ed       	ldi	r20, 0xD3	; 211
  56:	50 e3       	ldi	r21, 0x30	; 48
  58:	21 50       	subi	r18, 0x01	; 1
  5a:	40 40       	sbci	r20, 0x00	; 0
  5c:	50 40       	sbci	r21, 0x00	; 0
  5e:	e1 f7       	brne	.-8      	; 0x58 <__SREG__+0x19>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
	
	_delay_ms(2000);
	SPDR=0b11111111;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	8f b9       	out	0x0f, r24	; 15
	PORTB|=(1<<PORTB2);
  68:	c2 9a       	sbi	0x18, 2	; 24
	PORTB&=~((1<<PORTB2));
  6a:	c2 98       	cbi	0x18, 2	; 24
  6c:	6f ef       	ldi	r22, 0xFF	; 255
  6e:	83 ed       	ldi	r24, 0xD3	; 211
  70:	90 e3       	ldi	r25, 0x30	; 48
  72:	61 50       	subi	r22, 0x01	; 1
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <__SREG__+0x33>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <__SREG__+0x3d>
  7c:	00 00       	nop
	_delay_ms(2000);
    /* Replace with your application code */
    while (1) 
    {
		for(i=0;i<256;i++)
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	83 2f       	mov	r24, r19
  84:	92 2f       	mov	r25, r18
		{
			SPDR=i;
  86:	8f b9       	out	0x0f, r24	; 15
			while(!(SPSR&(1<<SPIF)));//подождем пока данные передадутс€
  88:	77 9b       	sbis	0x0e, 7	; 14
  8a:	fe cf       	rjmp	.-4      	; 0x88 <__SREG__+0x49>
			//сгенерируем отрицательный фронт дл€ записи в STORAGE REGISTER
			PORTB|=(1<<PORTB2);
  8c:	c2 9a       	sbi	0x18, 2	; 24
			PORTB&=~((1<<PORTB2));
  8e:	c2 98       	cbi	0x18, 2	; 24
  90:	4f e7       	ldi	r20, 0x7F	; 127
  92:	58 e3       	ldi	r21, 0x38	; 56
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	41 50       	subi	r20, 0x01	; 1
  98:	50 40       	sbci	r21, 0x00	; 0
  9a:	60 40       	sbci	r22, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <__SREG__+0x57>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <__SREG__+0x61>
  a0:	00 00       	nop
	PORTB&=~((1<<PORTB2));
	_delay_ms(2000);
    /* Replace with your application code */
    while (1) 
    {
		for(i=0;i<256;i++)
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	81 15       	cp	r24, r1
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	94 07       	cpc	r25, r20
  aa:	69 f7       	brne	.-38     	; 0x86 <__SREG__+0x47>
  ac:	ea cf       	rjmp	.-44     	; 0x82 <__SREG__+0x43>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
