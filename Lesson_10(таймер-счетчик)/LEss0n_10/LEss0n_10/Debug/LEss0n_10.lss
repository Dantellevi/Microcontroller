
LEss0n_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000125  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e2  00000000  00000000  00000385  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000188  00000000  00000000  00000467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000144  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cd  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	29 c0       	rjmp	.+82     	; 0x7a <SET+0x10>
  28:	2b c0       	rjmp	.+86     	; 0x80 <SET+0x16>
  2a:	2d c0       	rjmp	.+90     	; 0x86 <SET+0x1c>
  2c:	2f c0       	rjmp	.+94     	; 0x8c <SET+0x22>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <SET+0x28>
  30:	33 c0       	rjmp	.+102    	; 0x98 <SET+0x2e>
  32:	35 c0       	rjmp	.+106    	; 0x9e <SET+0x34>
  34:	37 c0       	rjmp	.+110    	; 0xa4 <SET+0x3a>
  36:	39 c0       	rjmp	.+114    	; 0xaa <SET+0x40>
  38:	3b c0       	rjmp	.+118    	; 0xb0 <SET+0x46>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a1 36       	cpi	r26, 0x61	; 97
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	6d d0       	rcall	.+218    	; 0x132 <main>
  58:	70 c0       	rjmp	.+224    	; 0x13a <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <Setting>:

unsigned char i=0;

void Setting()
{
	DDRB=0xFF;
  5c:	8f ef       	ldi	r24, 0xFF	; 255
  5e:	87 bb       	out	0x17, r24	; 23
	DDRB=0b11111110;
  60:	8e ef       	ldi	r24, 0xFE	; 254
  62:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<(PORTB0));
  64:	c0 9a       	sbi	0x18, 0	; 24
	PORTD=0x00;
  66:	12 ba       	out	0x12, r1	; 18
  68:	08 95       	ret

0000006a <SET>:
}

void SET(unsigned char i)
{
	switch(i)
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	8a 30       	cpi	r24, 0x0A	; 10
  6e:	91 05       	cpc	r25, r1
  70:	08 f5       	brcc	.+66     	; 0xb4 <SET+0x4a>
  72:	fc 01       	movw	r30, r24
  74:	ed 5e       	subi	r30, 0xED	; 237
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	09 94       	ijmp
	{
		case 0:{PORTD=0b00111111;break;}
  7a:	8f e3       	ldi	r24, 0x3F	; 63
  7c:	82 bb       	out	0x12, r24	; 18
  7e:	08 95       	ret
		case 1:{PORTD=0b00000110;break;}
  80:	86 e0       	ldi	r24, 0x06	; 6
  82:	82 bb       	out	0x12, r24	; 18
  84:	08 95       	ret
		case 2:{PORTD=0b01011011;break;}
  86:	8b e5       	ldi	r24, 0x5B	; 91
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret
		case 3:{PORTD=0b01001111;break;}
  8c:	8f e4       	ldi	r24, 0x4F	; 79
  8e:	82 bb       	out	0x12, r24	; 18
  90:	08 95       	ret
		case 4:{PORTD=0b01100110;break;}
  92:	86 e6       	ldi	r24, 0x66	; 102
  94:	82 bb       	out	0x12, r24	; 18
  96:	08 95       	ret
		case 5:{PORTD=0b01101101;break;}
  98:	8d e6       	ldi	r24, 0x6D	; 109
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	08 95       	ret
		case 6:{PORTD=0b01111101;break;}
  9e:	8d e7       	ldi	r24, 0x7D	; 125
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret
		case 7:{PORTD=0b00000111;break;}
  a4:	87 e0       	ldi	r24, 0x07	; 7
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret
		case 8:{PORTD=0b01111111;break;}
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	08 95       	ret
		case 9:{PORTD=0b01101111;break;}
  b0:	8f e6       	ldi	r24, 0x6F	; 111
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret

000000b6 <timer_ini>:
	}
}

void timer_ini(void)
{
	TCCR1B|=(1<<(WGM12));//устанавливаем режи СТС
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<(OCIE1A));//устанавливает бит разрешения прерывания 1-ого стчетчика по совпадению OCR1A
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	89 bf       	out	0x39, r24	; 57
	OCR1AH=0b01111010;//число для сравнения
  c2:	8a e7       	ldi	r24, 0x7A	; 122
  c4:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0b00010010;
  c6:	82 e1       	ldi	r24, 0x12	; 18
  c8:	8a bd       	out	0x2a, r24	; 42
	TCCR1B|=(1<<CS12);//устанавливаем делитель
  ca:	8e b5       	in	r24, 0x2e	; 46
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8e bd       	out	0x2e, r24	; 46
  d0:	08 95       	ret

000000d2 <__vector_6>:
	
	
}

ISR(TIMER1_COMPA_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	if (i>9)
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	10 f0       	brcs	.+4      	; 0x100 <__vector_6+0x2e>
	{
		i=0;
  fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
SET(i);
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 104:	b2 df       	rcall	.-156    	; 0x6a <SET>
i++;
 106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>


}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <main>:

int main(void)
{
	
	Setting();
 132:	94 df       	rcall	.-216    	; 0x5c <Setting>
	timer_ini();
 134:	c0 df       	rcall	.-128    	; 0xb6 <timer_ini>
	/* Replace with your application code */
	sei();
 136:	78 94       	sei
		
		
		
		

}
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x6>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
